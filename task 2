###栈

##用数组实现一个顺序栈
class Stack(object):
def __init__(self):
    self.stack = []

def push(self, item):
    self.stack.append(item)

def pop(self):
    return self.stack.pop()

def is_empty(self):
    return self.stack == []

def peek(self):
    if self.is_empty():
        return None

    return self.stack[-1]

def size(self):
    return len(self.stack)

stac = Stack(1,2,15,0)
print(st.pop())
print(st.peek())
print(st.pop())

##用链表实现一个链式栈
class Node(object):
    def __init__(self, data):
        self.data = data
        self.next = None


class Stack(object):
    def __init__(self):
        self.node = Node(None)
        self.head = self.node
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def get_size(self):
        return self.size

    def push(self, data):
        node = Node(data)
        node.next = self.head.next
        self.head.next = node
        self.size += 1

    def pop(self):
        if not self.is_empty():
            current_node = self.head.next
            if self.get_size() == 1:
                self.head.next = None
            else:
                self.head.next = self.head.next.next
            self.size -= 1
            return current_node.data
        else:
            raise IndexError("do not pop from empty stack")

    def top(self):
        if not self.is_empty():
            return self.head.next.data
        else:
            raise IndexError("can't read : stack is empty!")

###队列

##用数组实现一个顺序队列
class SQueue():
    def __init__(self,init_len=10):
        self._len=init_len
        self._elems=[0]*init_len
        self._head=0
        self._num=0

    def is_empty(self):
        return self._num==0

    def peek(self):
        if self.is_empty():
            print("当前队列为空")
            return
        return self._elems[self._head]

    def dequeue(self):
        if self.is_empty():
            print("当前队列为空")
            return
        e=self._elems[self._head]
        self._num-=1
        self._head=(self._head+1)%self._len
        return e

    def __extend(self):
        old_len=self._len
        self._len*=2
        new_elems=[0]*self._len
        for i in range(old_len):
            new_elems[i]=self._elems[(self._head+i)%old_len]
        self._elems=new_elems
        self._head=0

    def enqueue(self,e):
        if self._num==self._len:
            self.__extend()
        self._elems[(self._head+self._num)%self._len]=e
        self._num+=1

##用链表实现一个链式队列
class QueueError(ValueError):
    def __init__(self, text='queue is empty！'):
        print(text)

#节点
class Node:
    def __init__(self, elem, next_=None):
        self.elem = elem
        self.next = next_

# 队列的实现，头部删除、查看O(1),尾部加入O(1)
class LQueue(object):
    def __init__(self):
        self._head = None
        self._rear = None

    def is_empty(self):
        return self._head is None

    # 查看队列中最早进入的元素，不删除
    def peek(self):
        if self.is_empty():
            raise QueueError('queue is empty！')
        return self._head.elem

    # 将元素加入队列，入队
    def enqueue(self, elem):
        p = Node(elem)
        if self.is_empty():
            self._head = p
            self._rear = p
        else:
            self._rear.next = p
            self._rear = p

    # 删除队列中最早进入的元素并将其返回，出队
    def del_queue(self):
        if self.is_empty():
            raise QueueError('queue is empty！！')
        result = self._head.elem
        self._head = self._head.next
        return result

###递归

##斐波那契数列求值 f(n)=f(n-1)+f(n-2)
def feibona(n):
    if n < 2:
        return n
    return feibona(n - 1) + feibona(n - 2)

##求阶乘 n!
def fun(n):
    if n<=1:
        return 1
    else:
        return n*fun(n-1)
num=fun(int(raw_input()))
print num

##一组数据集合的全排列
COUNT=0
def perm(n,begin,end):
    global COUNT
    if begin>=end:
        print n
        COUNT +=1
    else:
        i=begin
        for num in range(begin,end):
            n[num],n[i]=n[i],n[num]
            perm(n,begin+1,end)
            n[num],n[i]=n[i],n[num]

n=[4,5,6,7,8,9]
perm(n,0,len(n))
print COUNT
